#include "../src/pramod_hash_map.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <map>
using namespace std;

#define MAX_ARRAY_SIZE 10000

//pramod hash map test
PramodHashMap<int,int> hMap;
map<int,int> mymap;

struct Node
{
  int key;
  int val;
};

Node ranArray[MAX_ARRAY_SIZE];

static __inline__ uint64_t TSC(void)
{
  struct timespec t1;
  uint64_t x;
  clock_gettime(CLOCK_MONOTONIC,&t1);
  uint64_t mult = 1000000000;
  uint64_t res = t1.tv_sec*mult + t1.tv_nsec;
  return res;
}

void genRandNumAndPutinArray()
{
  int k = 0;
  int v = 0;
  srand (time(NULL));
  bool isFound=false;
  uint32_t founCntr = 0;
  for (int i = 0;i<MAX_ARRAY_SIZE;i++)
  {
    k = i+1;
    v = rand()%10000000+1;
    ranArray[i].key=k;
    ranArray[i].val=v;
    printf ("Random number: %d and value is : %d\n", k,v);
  }
  int i = 1;
  for( i; i < MAX_ARRAY_SIZE+1; i++)
  {

    for(int j = 0;j <MAX_ARRAY_SIZE; j++)
    {
      if(ranArray[j].key == i)
      {
        isFound = true;
        break;
      }
    }
    if(!isFound)
    {
      printf("key is not generated by random number and key is %d \n",i);
      isFound = false;
    }
  }
}

void insert()
{
  uint64_t start = TSC();
  uint32_t cntr = 0;
  for (int i = 0; i <MAX_ARRAY_SIZE; i++)
  {
    hMap.insert(ranArray[i].key,ranArray[i].val);
  }
  uint64_t end = TSC();
  printf("TIME Taken by VAS HASH::insert() %llu\n",end-start);
  printf("no key counter = %u\n",cntr);
  printf("insert::Size of hashMap after insertion is %d\n",hMap.size());
  printf("insert::Deepest Link Length is %d\n",hMap.debugGetDeepestLinkSize());
  printf("insert::Total number of collisions are %d\n",hMap.debugGetTotalCollision());
  printf("insert::Collision Stats per link are as follows \n");
  hMap.debugPrintCollisionStats();


}

//remove all the key randomly
void remove()
{
  uint64_t start = TSC();
  for (int i = 0; i<MAX_ARRAY_SIZE; i++)
  {
    if(!hMap.remove(ranArray[i].key))
    {
      printf("remove::remove is falied for key %u\n",ranArray[i].key);
    }
  }
  uint64_t end = TSC();
  printf("TIME Taken by VAS HASH::remove() %llu\n",end-start);
  /*
  printf("remove::Size of hashMap after insertion is %u\n",hMap.size());
  printf("remove::Deepest Link Length is %u\n",hMap.debugGetDeepestLinkSize());
  printf("remove::Total number of collisions are %u\n",hMap.debugGetTotalCollision());
  printf("remove::Collision Stats per link are as follows \n");
  hMap.debugPrintCollisionStats();
*/
}

//get all the key randomly
void get()
{
  uint64_t start = TSC();
  int num =0;
  int k =0;
  for (int i = 0; i<MAX_ARRAY_SIZE; i++)
  {
    k = rand()%MAX_ARRAY_SIZE+1;
     num = hMap.get(k);
  }
  uint64_t end = TSC();
  printf("TIME Taken by VAS HASH::get() %llu\n",end-start);

}

//functions for stl map

//insert in stl map
void stlMapInsert()
{
  uint64_t start = TSC();
  for (int i = 0; i<MAX_ARRAY_SIZE; i++)
  {
    mymap.insert(std::pair<int,int>(ranArray[i].key,ranArray[i].val));
  }
  uint64_t end = TSC();
  printf("TIME Taken by stl map ::insert() %llu\n",end-start);
  printf("stlMapInsert::map size is %d\n",mymap.size());
}

//Get in stl map
void stlGet()
{
  uint64_t start = TSC();
  std::map<int,int>::iterator it;
  int num = 0;
  int k = 0;
  for (int i = 0;i<MAX_ARRAY_SIZE;i++)
  {
    k = rand()%MAX_ARRAY_SIZE+1;
		it = mymap.find(k);
		if(it != mymap.end())
				num = it->second;
  }
  uint64_t end = TSC();
  printf("TIME Taken by stl map ::get() %llu\n",end-start);
  printf("stlGet::map size is %d\n",mymap.size());

}

//remove in stl map
void stlMapRemove()
{
  uint64_t start = TSC();
  std::map<int,int>::iterator it;
  for (int i = 0;i<MAX_ARRAY_SIZE;i++)
  {
		it = mymap.find(ranArray[i].key);
		if(it != mymap.end())
				mymap.erase(it);
  }
  uint64_t end = TSC();
  printf("TIME Taken by stl map ::remove() %llu\n",end-start);
  printf("removestlMapRemove::map size is %d\n",mymap.size());
}

int main()
{
	memset(ranArray,0x0,sizeof(ranArray));
	genRandNumAndPutinArray();
	//stl insert, get and remove
	stlMapInsert();
	stlGet();
	stlMapRemove();
	//pramod hash insert, get and remove
	insert();
	get();
	remove();

	return 0;
}
